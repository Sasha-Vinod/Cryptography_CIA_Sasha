#include <iostream>
#include <vector>
#include <string>
#include <cctype>

using namespace std;

int determinant(const vector<vector<int>>& matrix) {
    return (matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]) % 26;
}

int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1;
}

vector<vector<int>> inverseMatrix(const vector<vector<int>>& matrix) {
    int det = determinant(matrix);
    int invDet = modInverse(det, 26);
    vector<vector<int>> inverse(2, vector<int>(2));

    if (invDet == -1) {
        cout << "Matrix is not invertible!" << endl;
        return inverse;
    }

    inverse[0][0] = (matrix[1][1] * invDet) % 26;
    inverse[0][1] = (-matrix[0][1] * invDet + 26) % 26;
    inverse[1][0] = (-matrix[1][0] * invDet + 26) % 26;
    inverse[1][1] = (matrix[0][0] * invDet) % 26;

    return inverse;
}

vector<vector<int>> multiplyMatrices(const vector<vector<int>>& A, const vector<vector<int>>& B) {
    vector<vector<int>> result(2, vector<int>(1));
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 1; j++) {
            result[i][j] = 0;
            for (int k = 0; k < 2; k++) {
                result[i][j] = (result[i][j] + A[i][k] * B[k][j]) % 26;
            }
        }
    }
    return result;
}

void textToNumbers(const string& text, vector<int>& numbers) {
    for (char ch : text) {
        if (isalpha(ch)) {
            numbers.push_back(tolower(ch) - 'a');
        }
    }
}

void numbersToText(const vector<int>& numbers, string& text) {
    for (int num : numbers) {
        text += (num + 'a');
    }
}

void hillEncrypt(const string& plaintext, const vector<vector<int>>& key, string& ciphertext) {
    vector<int> plaintextNumbers;
    textToNumbers(plaintext, plaintextNumbers);

    for (size_t i = 0; i < plaintextNumbers.size(); i += 2) {
        vector<vector<int>> pt(2, vector<int>(1));
        pt[0][0] = plaintextNumbers[i];
        pt[1][0] = (i + 1 < plaintextNumbers.size()) ? plaintextNumbers[i + 1] : 0;

        vector<vector<int>> encrypted = multiplyMatrices(key, pt);

        ciphertext += (encrypted[0][0] + 'a');
        ciphertext += (encrypted[1][0] + 'a');
    }
}

void hillDecrypt(const string& ciphertext, const vector<vector<int>>& key, string& plaintext) {
    vector<int> ciphertextNumbers;
    textToNumbers(ciphertext, ciphertextNumbers);

    vector<vector<int>> inverseKey = inverseMatrix(key);

    for (size_t i = 0; i < ciphertextNumbers.size(); i += 2) {
        vector<vector<int>> ct(2, vector<int>(1));
        ct[0][0] = ciphertextNumbers[i];
        ct[1][0] = (i + 1 < ciphertextNumbers.size()) ? ciphertextNumbers[i + 1] : 0;

        vector<vector<int>> decrypted = multiplyMatrices(inverseKey, ct);

        plaintext += (decrypted[0][0] + 'a');
        plaintext += (decrypted[1][0] + 'a');
    }
}

int main() {
    string plaintext, ciphertext;
    vector<vector<int>> key = { { 6, 24 }, { 1, 16 } };

    cout << "Enter plaintext: ";
    getline(cin, plaintext);

    hillEncrypt(plaintext, key, ciphertext);
    cout << "Encrypted text: " << ciphertext << endl;

    string decryptedText;
    hillDecrypt(ciphertext, key, decryptedText);
    cout << "Decrypted text: " << decryptedText << endl;

    return 0;
}
