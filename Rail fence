#include <iostream>
#include <string>
#include <vector>

using namespace std;

void railFenceEncrypt(const string& text, int key, string& encrypted) {
    vector<string> rail(key);
    int row = 0, direction = 1;

    for (char ch : text) {
        rail[row] += ch;
        if (row == 0) direction = 1;
        else if (row == key - 1) direction = -1;
        row += direction;
    }

    for (const auto& r : rail) {
        encrypted += r;
    }
}

void railFenceDecrypt(const string& text, int key, string& decrypted) {
    vector<string> rail(key);
    vector<int> railLength(key, 0);
    int row = 0, direction = 1;

    for (char ch : text) {
        railLength[row]++;
        if (row == 0) direction = 1;
        else if (row == key - 1) direction = -1;
        row += direction;
    }

    int index = 0;
    for (int i = 0; i < key; i++) {
        rail[i] = text.substr(index, railLength[i]);
        index += railLength[i];
    }

    row = 0, direction = 1;
    for (int i = 0; i < text.length(); i++) {
        decrypted += rail[row][0];
        rail[row] = rail[row].substr(1);
        if (row == 0) direction = 1;
        else if (row == key - 1) direction = -1;
        row += direction;
    }
}

int main() {
    string text, encrypted, decrypted;
    int key;

    cout << "Enter plaintext: ";
    getline(cin, text);

    cout << "Enter key: ";
    cin >> key;

    railFenceEncrypt(text, key, encrypted);
    cout << "Encrypted text: " << encrypted << endl;

    railFenceDecrypt(encrypted, key, decrypted);
    cout << "Decrypted text: " << decrypted << endl;

    return 0;
}
